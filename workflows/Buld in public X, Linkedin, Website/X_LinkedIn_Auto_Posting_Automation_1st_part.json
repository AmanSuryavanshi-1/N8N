{
    "nodes": [
      {
        "parameters": {},
        "type": "n8n-nodes-base.manualTrigger",
        "typeVersion": 1,
        "position": [
          -832,
          -576
        ],
        "id": "cb463f58-8e0b-4895-9177-a1411291cd44",
        "name": "When clicking 'Execute workflow'"
      },
      {
        "parameters": {
          "resource": "databasePage",
          "operation": "getAll",
          "databaseId": {
            "__rl": true,
            "value": "21a34bf1-f7e5-8035-b16f-d5ebf63a86a9",
            "mode": "list"
          },
          "returnAll": true,
          "filterType": "manual",
          "filters": {
            "conditions": [
              {
                "key": "Status|select",
                "condition": "equals",
                "selectValue": "Ready to Post"
              }
            ]
          },
          "options": {
            "sort": {
              "sortValue": [
                {
                  "key": "ManualOrder|number",
                  "direction": "ascending"
                },
                {
                  "key": "Priority|select",
                  "direction": "ascending"
                },
                {
                  "timestamp": true,
                  "key": "created_time",
                  "direction": "ascending"
                }
              ]
            }
          }
        },
        "id": "13f4fabb-6e0e-4071-9769-2ab674445c70",
        "name": "Notion – Get Ready Content",
        "type": "n8n-nodes-base.notion",
        "typeVersion": 2,
        "position": [
          -608,
          -576
        ],
        "credentials": {
          "notionApi": {
            "id": "je8hKPK6RzYSk4JA",
            "name": "Notion account 2"
          }
        }
      },
      {
        "parameters": {
          "conditions": {
            "options": {
              "caseSensitive": true
            },
            "conditions": [
              {
                "leftValue": "={{ $input.all().length > 0 }}",
                "rightValue": true,
                "operator": {
                  "type": "boolean",
                  "operation": "equals"
                }
              }
            ]
          },
          "options": {}
        },
        "id": "d491a456-1d07-488d-b003-df69b629ef3e",
        "name": "Filter – Has Content",
        "type": "n8n-nodes-base.if",
        "typeVersion": 2,
        "position": [
          -384,
          -576
        ]
      },
      {
        "parameters": {
          "jsCode": "// CONTENT SELECTION & PROFILE SETUP\nconst items = $input.all();\n\nif (!items || items.length === 0) {\n  console.log('❌ No content ready for processing');\n  return [];\n}\n\n// Get first item (priority + FIFO)\nconst item = items[0].json;\nconsole.log('🎯 Processing item:', item.id);\n\n// Enhanced property extraction with fallbacks\nconst getProperty = (obj, path, defaultValue = '') => {\n  const keys = path.split('.');\n  let result = obj;\n  for (const key of keys) {\n    if (result && typeof result === 'object' && key in result) {\n      result = result[key];\n    } else {\n      return defaultValue;\n    }\n  }\n  return result || defaultValue;\n};\n\nconst title = getProperty(item, 'properties.Content Pages.title.0.plain_text') || \n              getProperty(item, 'properties.title.title.0.plain_text') ||\n              getProperty(item, 'properties.Name.title.0.plain_text') ||\n              getProperty(item, 'name') || \n              'Untitled Content';\n\nconst category = getProperty(item, 'properties.Category.select.name') || \n                 'Learning';\n\nconst priority = getProperty(item, 'properties.Priority.select.name') || \n                 'normal';\n\n// Complete user profile for authentic content\nconst userProfile = {\n  name: 'Aman Surya',\n  role: 'Fresh CS Graduate & AI/ML Enthusiast',\n  focus: 'Building with Next.js/React/n8n, seeking AI PM roles',\n  personality: 'Authentic, curious, growth-minded, detail-oriented',\n  expertise: ['JavaScript', 'React', 'Next.js', 'n8n', 'AI/ML', 'Automation', 'Product Management'],\n  audience: 'Tech community, AI enthusiasts, developers, PM aspirants',\n  timezone: 'Asia/Kolkata',\n  writing_style: {\n    twitter: 'Casual, engaging, thread-friendly, question-driven, community-focused',\n    linkedin: 'Professional, detailed, story-driven, insight-rich, career-focused'\n  },\n  content_goals: {\n    primary: 'Build technical credibility for AI PM roles',\n    secondary: 'Help fellow developers learn and grow',\n    engagement: 'Create genuine discussions and valuable connections'\n  }\n};\n\nconst sessionId = `session_${Date.now()}_${(item.id || '').toString().substring(0, 8)}`;\n\nreturn [{\n  json: {\n    id: item.id,\n    title: title,\n    category: category,\n    priority: priority,\n    sessionId: sessionId,\n    userProfile: userProfile,\n    processingStartTime: new Date().toISOString(),\n    remainingItems: items.length - 1,\n    originalId: item.id\n  }\n}];"
        },
        "id": "92728868-1a4d-4fae-82cd-2f34f7311b1a",
        "name": "Code – Select Content & Profile",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          -160,
          -576
        ]
      },
      {
        "parameters": {
          "resource": "databasePage",
          "operation": "update",
          "pageId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "propertiesUi": {
            "propertyValues": [
              {
                "key": "Status|select",
                "type": "select",
                "selectValue": "Processing"
              },
              {
                "key": "SessionID|rich_text",
                "richText": true,
                "text": {
                  "text": [
                    {
                      "text": "={{ $json.sessionId }}",
                      "annotationUi": {}
                    }
                  ]
                }
              },
              {
                "key": "Processing Started|date",
                "type": "date",
                "date": "={{ $json.processingStartTime }}"
              },
              {
                "key": "Notes|rich_text",
                "richText": true,
                "text": {
                  "text": [
                    {
                      "text": "=🔄 Processing started\\nSession: {{ $json.sessionId }}\\nPriority: {{ $json.priority }}\\nCategory: {{ $json.category }}\\nStarted: {{ new Date().toLocaleString('en-IN', {timeZone: 'Asia/Kolkata'}) }} IST",
                      "annotationUi": {}
                    }
                  ]
                }
              }
            ]
          },
          "options": {}
        },
        "id": "9e38576b-fb53-4685-ad41-22df9dd4dbed",
        "name": "Notion – Update to Processing",
        "type": "n8n-nodes-base.notion",
        "typeVersion": 2,
        "position": [
          64,
          -576
        ],
        "credentials": {
          "notionApi": {
            "id": "je8hKPK6RzYSk4JA",
            "name": "Notion account 2"
          }
        }
      },
      {
        "parameters": {
          "resource": "block",
          "operation": "getAll",
          "blockId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "returnAll": true,
          "fetchNestedBlocks": true,
          "simplifyOutput": false
        },
        "id": "11de4a06-52fc-4b10-9b5b-0823c49a5e91",
        "name": "Notion – Extract All Blocks",
        "type": "n8n-nodes-base.notion",
        "typeVersion": 2.2,
        "position": [
          288,
          -576
        ],
        "credentials": {
          "notionApi": {
            "id": "je8hKPK6RzYSk4JA",
            "name": "Notion account 2"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// COMPREHENSIVE CONTENT EXTRACTION WITH IMAGE PROCESSING\ntry {\n  console.log('🔍 Starting comprehensive content extraction...');\n  \n  const extractItems = $items('Notion – Extract All Blocks');\n  if (!extractItems?.length) {\n    throw new Error('No blocks from Notion – Extract All Blocks');\n  }\n  console.log(`📥 Processing ${extractItems.length} block items`);\n  \n  const allBlocks = extractItems.map(item => item.json);\n  const blockMap = new Map();\n  const topLevelBlocks = [];\n  \n  // Build hierarchical tree including ALL block types\n  allBlocks.forEach(block => {\n    blockMap.set(block.id, { ...block, children: [] });\n  });\n  \n  allBlocks.forEach(block => {\n    if (block.parent?.type === 'page_id') {\n      topLevelBlocks.push(blockMap.get(block.id));\n    } else if (block.parent?.type === 'block_id') {\n      const parent = blockMap.get(block.parent.block_id);\n      if (parent) {\n        parent.children.push(blockMap.get(block.id));\n      }\n    }\n  });\n  \n  console.log(`🌳 Built tree with ${topLevelBlocks.length} top-level blocks`);\n  \n  // Enhanced text extraction\n  const extractText = (richTextArray) => {\n    if (!Array.isArray(richTextArray)) return '';\n    return richTextArray\n      .map(item => item.plain_text || item.text?.content || '')\n      .join('')\n      .trim();\n  };\n  \n  // Process images for social media\n  const processImage = (url, caption = '') => {\n    if (!url) return null;\n    try {\n      // Clean AWS URLs but keep functionality\n      const urlObj = new URL(url);\n      return {\n        url: url, // Keep full URL for access\n        caption: caption,\n        alt_text: caption || 'Content image',\n        processing_needed: true\n      };\n    } catch {\n      return null;\n    }\n  };\n  \n  // Recursive content renderer - PRESERVE ALL CONTENT\n  function renderBlock(block, level = 0) {\n    if (!block?.type) return { text: '', sections: [], images: [] };\n    \n    const indent = '  '.repeat(level);\n    const blockData = block[block.type] || {};\n    let content = '';\n    let sections = [];\n    let images = [];\n    let text = extractText(blockData?.rich_text || blockData?.text || []);\n    \n    switch (block.type) {\n      case 'heading_1':\n        content = `\\n# ${text}\\n\\n`;\n        if (text) sections.push({ level: 1, title: text, content: '', id: block.id });\n        break;\n      case 'heading_2':\n        content = `\\n## ${text}\\n\\n`;\n        if (text) sections.push({ level: 2, title: text, content: '', id: block.id });\n        break;\n      case 'heading_3':\n        content = `\\n### ${text}\\n\\n`;\n        if (text) sections.push({ level: 3, title: text, content: '', id: block.id });\n        break;\n      case 'paragraph':\n        if (text) content = `${text}\\n\\n`;\n        break;\n      case 'bulleted_list_item':\n        if (text) content = `${indent}- ${text}\\n`;\n        break;\n      case 'numbered_list_item':\n        if (text) content = `${indent}1. ${text}\\n`;\n        break;\n      case 'toggle':\n        if (text) {\n          content = `\\n▶️ ${text}\\n`;\n          // Mark as important section\n          sections.push({ level: 4, title: text, content: '', id: block.id, type: 'toggle' });\n        }\n        break;\n      case 'callout':\n        const icon = blockData?.icon?.emoji || '💡';\n        if (text) content = `\\n${icon} **${text}**\\n\\n`;\n        break;\n      case 'quote':\n        if (text) content = `\\n> ${text}\\n\\n`;\n        break;\n      case 'code':\n        const language = blockData?.language || 'text';\n        if (text) {\n          content = `\\n\\`\\`\\`${language}\\n${text}\\n\\`\\`\\`\\n\\n`;\n          sections.push({ level: 5, title: `Code: ${language}`, content: text, id: block.id, type: 'code' });\n        }\n        break;\n      case 'divider':\n        content = '\\n---\\n\\n';\n        break;\n      case 'image':\n        const imageUrl = blockData?.file?.url || blockData?.external?.url;\n        if (imageUrl) {\n          const processedImage = processImage(imageUrl, text);\n          if (processedImage) {\n            images.push(processedImage);\n            content = `\\n[📸 Image: ${text || 'Visual content'}]\\n\\n`;\n          }\n        }\n        break;\n      case 'video':\n        content = `\\n[🎥 Video: ${text || 'Video content'}]\\n\\n`;\n        break;\n      case 'audio':\n        content = `\\n[🎵 Audio: ${text || 'Audio content'}]\\n\\n`;\n        break;\n      case 'file':\n        content = `\\n[📄 File: ${text || 'Attached file'}]\\n\\n`;\n        break;\n      case 'bookmark':\n        const bookmarkUrl = blockData?.url || '';\n        if (bookmarkUrl) content = `\\n[🔗 ${text || bookmarkUrl}](${bookmarkUrl})\\n\\n`;\n        break;\n      case 'equation':\n        if (text) content = `\\n$$${text}$$\\n\\n`;\n        break;\n      case 'table_of_contents':\n        content = '\\n[📋 Table of Contents]\\n\\n';\n        break;\n      default:\n        if (text) content = `${indent}${text}\\n\\n`;\n        break;\n    }\n    \n    // Process children recursively - CRITICAL FOR TOGGLES\n    if (block.children?.length) {\n      const childrenResult = block.children\n        .map(child => renderBlock(child, level + 1))\n        .reduce((acc, result) => {\n          acc.text += result.text;\n          acc.sections = acc.sections.concat(result.sections);\n          acc.images = acc.images.concat(result.images);\n          return acc;\n        }, { text: '', sections: [], images: [] });\n      \n      content += childrenResult.text;\n      sections = sections.concat(childrenResult.sections);\n      images = images.concat(childrenResult.images);\n    }\n    \n    return { text: content, sections: sections, images: images };\n  }\n  \n  // Process all blocks\n  const result = topLevelBlocks\n    .map(block => renderBlock(block))\n    .reduce((acc, blockResult) => {\n      acc.text += blockResult.text;\n      acc.sections = acc.sections.concat(blockResult.sections);\n      acc.images = acc.images.concat(blockResult.images);\n      return acc;\n    }, { text: '', sections: [], images: [] });\n  \n  // Clean up text while preserving structure\n  let fullText = result.text\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .replace(/\\s+$/gm, '') // Remove trailing spaces\n    .trim();\n  \n  const stats = {\n    totalBlocks: allBlocks.length,\n    processedBlocks: topLevelBlocks.length,\n    characterCount: fullText.length,\n    wordCount: fullText.split(/\\s+/).filter(w => w.length > 0).length,\n    sections: result.sections.length,\n    images: result.images.length,\n    toggleSections: result.sections.filter(s => s.type === 'toggle').length,\n    codeSections: result.sections.filter(s => s.type === 'code').length\n  };\n  \n  console.log('✅ Content extraction complete:', stats);\n  \n  return [{\n    json: {\n      fullText: fullText,\n      sections: result.sections,\n      images: result.images,\n      extractionStats: stats,\n      contentMetadata: {\n        totalSections: result.sections.length,\n        hasImages: result.images.length > 0,\n        hasCode: result.sections.some(s => s.type === 'code'),\n        hasToggles: result.sections.some(s => s.type === 'toggle'),\n        hasLists: fullText.includes('- ') || /^\\d+\\.\\s/m.test(fullText),\n        complexity: stats.wordCount > 800 ? 'high' : stats.wordCount > 400 ? 'medium' : 'low'\n      }\n    }\n  }];\n  \n} catch (error) {\n  console.error('❌ Content extraction failed:', error.message);\n  return [{\n    json: {\n      fullText: `Content extraction error: ${error.message}`,\n      sections: [],\n      images: [],\n      extractionStats: { error: true },\n      contentMetadata: { error: error.message }\n    }\n  }];\n}"
        },
        "id": "1fe1752d-836d-463c-923f-69d239b87157",
        "name": "Code – Extract & Process Content",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          512,
          -576
        ]
      },
      {
        "parameters": {
          "messages": {
            "message": [
              {
                "content": "=You are a business development specialist for full-stack automation developers. Research Twitter and LinkedIn strategies that attract high-paying clients and premium job opportunities for developers who specialize in NextJS + automation + API integrations. Focus on Indian market (Delhi/NCR) + global remote opportunities targeting small businesses, startups, agencies, and enterprises.",
                "role": "system"
              },
              {
                "content": "=Research client acquisition and job opportunity strategies for:\n\n**PROFESSIONAL PROFILE:**\n- Expert: Full-stack automation developer (Frontend + Automation + API Integration)\n- Skills: NextJS, n8n, Python, JavaScript, SEO optimization, Lighthouse performance\n- Services: Custom websites, automation systems, API integrations, business process optimization\n- Location: Delhi/NCR + Global remote\n- Target Clients: Small businesses, startups, agencies, enterprises needing automation\n- Goals: Gigs → Job offers → Audience building → Revenue generation\n\n**CONTENT CONTEXT:**\n- Category: {{ $('Code – Select Content & Profile').first().json.category }}\n- Title: {{ $('Code – Select Content & Profile').first().json.title }}\n- Content Mix: Technical tutorials (30%), Project showcases (20%), System insights (20%), Learning docs (30%)\n\n**RESEARCH OBJECTIVES:**\n1. Hashtags that attract automation clients and technical hiring managers\n2. Optimal posting times for reaching business decision makers in Indian + global markets\n3. Engagement strategies for showcasing technical expertise with business results\n4. Content approaches that generate leads and job inquiries\n\n**RETURN EXACTLY THIS JSON:**\n{\n  \"trending_hashtags\": {\n    \"twitter\": [\"#NextJS\", \"#Automation\", \"#n8n\", \"#WebDevelopment\", \"#BusinessAutomation\", \"#APIIntegration\", \"#BuildInPublic\"],\n    \"linkedin\": [\"#FullStackDevelopment\", \"#ProcessAutomation\", \"#NextJSDeveloper\", \"#BusinessEfficiency\", \"#TechnicalConsulting\", \"#WebsiteDevelopment\", \"#AutomationSpecialist\", \"#APIIntegration\", \"#DelhiTech\"]\n  },\n  \"optimal_times\": {\n    \"twitter_ist\": \"Business hours: 9:00-11:00 AM, 2:00-4:00 PM IST for Indian clients; 7:00-9:00 PM IST for global reach\",\n    \"linkedin_ist\": \"Peak B2B engagement: 9:00-11:00 AM, 3:00-5:00 PM IST Tuesday-Thursday; 8:00-10:00 AM for international clients\"\n  },\n  \"engagement_strategies\": {\n    \"twitter\": \"Share automation wins with metrics, showcase website performance improvements, offer free technical audits, engage with startup founders and agency owners, demonstrate API integration solutions\",\n    \"linkedin\": \"Post detailed case studies with ROI metrics, share technical insights with business impact, showcase website performance achievements, engage with CTOs and business owners, offer process automation consultations\"\n  }\n}"
              }
            ]
          },
          "options": {
            "maxTokens": 1500,
            "temperature": 0.3
          },
          "requestOptions": {}
        },
        "id": "73f19463-8206-43ad-82b1-b4ba53a9c5d7",
        "name": "Perplexity – Research Hashtags & Timing",
        "type": "n8n-nodes-base.perplexity",
        "typeVersion": 1,
        "position": [
          736,
          -672
        ],
        "credentials": {
          "perplexityApi": {
            "id": "Ss20gojfOfH1gtj7",
            "name": "Perplexity Anki"
          }
        }
      },
      {
        "parameters": {
          "messages": {
            "message": [
              {
                "content": "=You are a competitive intelligence analyst for full-stack automation developers targeting Indian and global markets. Research successful positioning strategies used by developers who attract premium clients and job offers through technical expertise combined with business results. Focus on NextJS developers, automation specialists, and technical consultants.",
                "role": "system"
              },
              {
                "content": "=Analyze market positioning strategies for full-stack automation developers:\n\n**COMPETITIVE LANDSCAPE:**\n- Target Market: Small businesses, startups, agencies, enterprises (Delhi/NCR + Global remote)\n- Service Portfolio: NextJS development, automation systems, API integrations, performance optimization\n- Content Strategy: {{ $('Code – Select Content & Profile').first().json.category }} content about {{ $('Code – Select Content & Profile').first().json.title }}\n- Revenue Goals: Client projects → Job offers → Audience monetization\n\n**ANALYSIS REQUIREMENTS:**\n1. How successful NextJS + automation developers position their services\n2. Content strategies that attract high-value clients and job opportunities  \n3. Market positioning approaches that work for Indian developers in global markets\n4. Successful formats for showcasing technical expertise with business impact\n\n**RETURN EXACTLY THIS JSON:**\n{\n  \"content_themes\": [\"Website performance case studies with Lighthouse scores\", \"Automation ROI breakdowns with specific metrics\", \"NextJS project showcases with business impact\", \"API integration solutions for common business problems\", \"Before/after process improvement stories\", \"Technical deep-dives with cost-saving insights\"],\n  \"engagement_patterns\": [\"Share specific performance metrics and improvements\", \"Demonstrate problem-solving methodology\", \"Show technical depth with clear business benefits\", \"Offer free website audits and automation assessments\", \"Document client success stories with numbers\", \"Connect technical solutions to revenue/efficiency gains\"],\n  \"successful_formats\": {\n    \"twitter\": [\"Performance improvement threads with screenshots\", \"Automation result threads with time/cost savings\", \"Technical tip threads solving real problems\", \"Project showcase threads with metrics\", \"Free audit offer threads\"],\n    \"linkedin\": [\"Detailed case studies with performance data\", \"Technical deep-dives showing business ROI\", \"Project breakdowns with client results\", \"Industry-specific automation solutions\", \"Website performance optimization insights\"]\n  },\n  \"competitor_insights\": [\"Technical expertise + proven results = premium positioning\", \"Lighthouse scores and performance metrics build immediate credibility\", \"Free audits and assessments generate qualified leads\", \"Specific client success stories with metrics outperform generic content\", \"Combining frontend excellence with automation positions as full-solution provider\"]\n}"
              }
            ]
          },
          "options": {
            "maxTokens": 1500,
            "temperature": 0.3
          },
          "requestOptions": {}
        },
        "id": "ce5dd4a3-21b4-4bf6-bc5b-786bffd6ef54",
        "name": "Perplexity – Research Competitors & Themes",
        "type": "n8n-nodes-base.perplexity",
        "typeVersion": 1,
        "position": [
          736,
          -480
        ],
        "credentials": {
          "perplexityApi": {
            "id": "Ss20gojfOfH1gtj7",
            "name": "Perplexity Anki"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// STRATEGY ANALYSIS & CONTEXT BUILDING\nconst contentData = $('Code – Select Content & Profile').first().json;\nconst extractedContent = $('Code – Extract & Process Content').first().json;\nconst hashtagData = $('Perplexity – Research Hashtags & Timing').first().json || {};\nconst competitorData = $('Perplexity – Research Competitors & Themes').first().json || {};\n\nconsole.log('🧠 Building comprehensive content strategy...');\n\n// Parse research data with fallbacks\nlet hashtagsAndTiming = { trending_hashtags: { twitter: [], linkedin: [] }, optimal_times: {}, engagement_strategies: {} };\nlet competitorInsights = { content_themes: [], engagement_patterns: [], successful_formats: { twitter: [], linkedin: [] }, competitor_insights: [] };\n\n// Process hashtag research\ntry {\n  const hashtagResponse = hashtagData.choices?.[0]?.message?.content || JSON.stringify(hashtagData);\n  const hashtagJson = hashtagResponse.match(/\\{[\\s\\S]*\\}/);\n  if (hashtagJson) {\n    hashtagsAndTiming = { ...hashtagsAndTiming, ...JSON.parse(hashtagJson[0]) };\n  }\n} catch (e) {\n  console.log('Using fallback hashtags:', e.message);\n  hashtagsAndTiming = {\n    trending_hashtags: {\n      twitter: ['#BuildInPublic', '#LearningInPublic', '#AI', '#TechCommunity', '#IndianTech'],\n      linkedin: ['#ArtificialIntelligence', '#MachineLearning', '#TechCareers', '#BuildInPublic', '#IndianTechCommunity']\n    },\n    optimal_times: {\n      twitter_ist: '8:00-10:00 AM, 7:00-9:00 PM',\n      linkedin_ist: '9:00-11:00 AM, 3:00-5:00 PM'\n    },\n    engagement_strategies: {\n      twitter: 'Thread-based storytelling with community questions',\n      linkedin: 'Professional insights with career relevance'\n    }\n  };\n}\n\n// Process competitor research\ntry {\n  const competitorResponse = competitorData.choices?.[0]?.message?.content || JSON.stringify(competitorData);\n  const competitorJson = competitorResponse.match(/\\{[\\s\\S]*\\}/);\n  if (competitorJson) {\n    competitorInsights = { ...competitorInsights, ...JSON.parse(competitorJson[0]) };\n  }\n} catch (e) {\n  console.log('Using fallback competitor insights:', e.message);\n  competitorInsights = {\n    content_themes: ['Technical tutorials', 'Career insights', 'Project breakdowns'],\n    engagement_patterns: ['Ask questions', 'Share failures', 'Show progress'],\n    successful_formats: {\n      twitter: ['Thread stories', 'Quick tips', 'Progress updates'],\n      linkedin: ['Detailed case studies', 'Career learnings', 'Technical deep-dives']\n    },\n    competitor_insights: ['Build in public resonates', 'Personal stories drive engagement', 'Technical depth builds credibility']\n  };\n}\n\n// Analyze content characteristics\nconst stats = extractedContent.extractionStats;\nconst wordCount = stats.wordCount || 0;\nconst sections = extractedContent.sections || [];\nconst images = extractedContent.images || [];\nconst metadata = extractedContent.contentMetadata || {};\n\nconsole.log(`📊 Content analysis: ${wordCount} words, ${sections.length} sections, ${images.length} images`);\n\n// INTELLIGENT CONTENT STRATEGY\nfunction createContentStrategy(wordCount, sections, images, complexity) {\n  const strategy = {\n    totalPosts: 0,\n    twitter: { threads: [] },\n    linkedin: { posts: [] },\n    timing: {\n      immediate: [],\n      delayed_30sec: [],\n      delayed_60sec: [],\n      delayed_90sec: [],\n      delayed_120sec: []\n    }\n  };\n  \n  // Twitter Strategy\n  if (wordCount <= 200) {\n    // Single thread\n    strategy.twitter.threads.push({\n      id: 1,\n      type: 'single_thread',\n      priority: 'immediate',\n      estimated_tweets: 3,\n      focus: 'key_insights'\n    });\n  } else if (wordCount <= 600) {\n    // Two threads\n    strategy.twitter.threads.push({\n      id: 1,\n      type: 'overview_thread',\n      priority: 'immediate',\n      estimated_tweets: 4,\n      focus: 'main_concepts'\n    });\n    strategy.twitter.threads.push({\n      id: 2,\n      type: 'detail_thread',\n      priority: 'delayed_30sec',\n      estimated_tweets: 3,\n      focus: 'implementation_details'\n    });\n  } else {\n    // Multiple threads for large content\n    const threadCount = Math.min(3, Math.ceil(sections.length / 2));\n    for (let i = 0; i < threadCount; i++) {\n      const delays = ['immediate', 'delayed_30sec', 'delayed_60sec'];\n      strategy.twitter.threads.push({\n        id: i + 1,\n        type: i === 0 ? 'introduction_thread' : `content_thread_${i}`,\n        priority: delays[i] || 'delayed_90sec',\n        estimated_tweets: i === 0 ? 4 : 3,\n        focus: i === 0 ? 'overview' : `section_${i}`,\n        sections: sections.slice(i * 2, (i + 1) * 2)\n      });\n    }\n  }\n  \n  // LinkedIn Strategy\n  if (wordCount <= 800) {\n    strategy.linkedin.posts.push({\n      id: 1,\n      type: 'comprehensive_post',\n      priority: 'delayed_90sec',\n      estimated_length: Math.min(2500, wordCount * 3),\n      focus: 'complete_story'\n    });\n  } else {\n    strategy.linkedin.posts.push({\n      id: 1,\n      type: 'overview_post',\n      priority: 'delayed_60sec',\n      estimated_length: 2000,\n      focus: 'key_insights'\n    });\n    strategy.linkedin.posts.push({\n      id: 2,\n      type: 'detailed_post',\n      priority: 'delayed_120sec',\n      estimated_length: 2500,\n      focus: 'technical_deep_dive'\n    });\n  }\n  \n  strategy.totalPosts = strategy.twitter.threads.length + strategy.linkedin.posts.length;\n  return strategy;\n}\n\nconst contentStrategy = createContentStrategy(wordCount, sections, images, metadata.complexity);\n\n// Build comprehensive context\nconst masterContext = {\n  // Core identifiers\n  sessionId: contentData.sessionId,\n  originalId: contentData.originalId,\n  \n  // Content basics\n  title: contentData.title,\n  category: contentData.category,\n  priority: contentData.priority,\n  \n  // User context\n  userProfile: contentData.userProfile,\n  \n  // Content analysis\n  contentAnalysis: {\n    wordCount,\n    characterCount: stats.characterCount,\n    sections: sections.length,\n    images: images.length,\n    hasCode: metadata.hasCode,\n    hasToggles: metadata.hasToggles,\n    complexity: metadata.complexity\n  },\n  \n  // Source content\n  sourceContent: {\n    fullText: extractedContent.fullText,\n    sections: sections,\n    images: images\n  },\n  \n  // Strategy\n  contentStrategy: contentStrategy,\n  \n  // Research insights\n  researchData: {\n    hashtagsAndTiming: hashtagsAndTiming,\n    competitorInsights: competitorInsights\n  },\n  \n  // Processing metadata\n  processingTime: new Date().toISOString()\n};\n\nconsole.log(`✅ Strategy created:`);\nconsole.log(`📱 Twitter: ${contentStrategy.twitter.threads.length} threads`);\nconsole.log(`💼 LinkedIn: ${contentStrategy.linkedin.posts.length} posts`);\nconsole.log(`🖼️ Images: ${images.length}`);\n\nreturn [{ json: masterContext }];"
        },
        "id": "608cd532-ccf5-4aba-b6d5-67c8a6fa1e9d",
        "name": "Code – Build Strategy & Context",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1184,
          -576
        ]
      },
      {
        "parameters": {
          "modelId": {
            "__rl": true,
            "value": "models/gemini-flash-lite-latest",
            "mode": "list",
            "cachedResultName": "models/gemini-flash-lite-latest"
          },
          "messages": {
            "values": [
              {
                "content": "=You are Aman Suryavanshi’s personal brand strategist for building a premium full-stack automation consultancy. Create Twitter threads that showcase his technical expertise while attracting high-value clients and job opportunities.\n\nPROFESSIONAL IDENTITY:\n\nName: Aman Suryavanshi\n\nTitle: Full-Stack Automation Developer & Technical Product Coordinator\n\nExpertise: NextJS Websites (SEO & Lighthouse-optimized) + n8n Automations + API Integrations\n\nPortfolio Example: https://github.com/AmanSuryavanshi-1/Aviators_Training_Centre\n\nLocation: Delhi/NCR + Global remote\n\nValue Proposition: “I build fast, SEO-optimized NextJS sites AND automate business processes end-to-end.”\n\nTarget Audience: Small businesses, startups, agencies, enterprises, technical hiring managers\n\nBUSINESS OBJECTIVES:\n\nGenerate client inquiries for website + automation projects\n\nAttract AI PM / Automation Specialist job offers (remote + Delhi/NCR)\n\nBuild audience and followers for long-term revenue\n\nCONTENT TRANSFORMATION CONTEXT:\n\nSource: {{ $json.title }} ({{ $json.category }})\n\nAnalysis: {{ $json.contentAnalysis.wordCount }} words, {{ $json.contentAnalysis.sections }} sections\n\nImages Available: {{ $json.contentAnalysis.images }}\n\nMARKET INTELLIGENCE:\n\nClient-Attracting Hashtags: {{ $json.researchData.hashtagsAndTiming.trending_hashtags.twitter.join(', ') }}\n\nEngagement Strategy: {{ $json.researchData.hashtagsAndTiming.engagement_strategies.twitter }}\n\nCompetitor Patterns: {{ $json.researchData.competitorInsights.engagement_patterns.join('; ') }}\n\nSOURCE CONTENT:\n{{ $json.sourceContent.fullText }}\n\nCLIENT ACQUISITION REQUIREMENTS:\n\n≤275 characters per tweet (strictly enforce)\n\nDemonstrate business-impact by showing performance metrics (Lighthouse, load times)\n\nFrame insights as “here’s how I helped businesses succeed”\n\nPosition as expert consultant, not just learner\n\nSubtle CTA: invite clients to connect for automation audits\n\nUse 2–3 strategic hashtags each tweet\n\nCONTENT TRANSFORMATION STRATEGY:\n\n“Here’s how I optimized a NextJS site to 98 Lighthouse score in 0.8s”\n\n“The automation that saved my client $5K/mo using n8n”\n\n“Case study: built a workflow that processed 10K records in 2 minutes”\n\n“Top performance mistakes 90% of sites make—and how to fix them”\n\nPROFESSIONAL VOICE EXAMPLES:\n\n“Just boosted a client’s Lighthouse score from 47 to 97. Load time fell from 4.2s to 1.1s. Here’s the exact strategy I used… 🧵”\n\n“Most businesses waste 20+ hrs/week on manual tasks. I automated their workflow in n8n—ROI: 400% in month 1. Here’s how… 🧵”\n\n**RETURN EXACTLY THIS JSON:**\n{\n  \"twitter_threads\": [\n    {\n      \"thread_id\": 1,\n      \"priority\": \"immediate\",\n      \"theme\": \"business value and technical expertise focus\",\n      \"tweets\": [\n        {\n          \"position\": 1,\n          \"content\": \"🧵 Just delivered a NextJS site with 98 Lighthouse score that loads in 0.8s. Here's the optimization strategy...\",\n          \"char_count\": 115,\n          \"has_image\": false\n        },\n        {\n          \"position\": 2,\n          \"content\": \"2/ The client was losing 40% visitors due to slow loading. My solution: [technical approach] = 3x faster site\",\n          \"char_count\": 110,\n          \"has_image\": false\n        }\n      ]\n    }\n  ]\n}\n"
              }
            ]
          },
          "options": {
            "temperature": 0.7
          }
        },
        "id": "299247c2-d7e2-4244-8011-281d929fa771",
        "name": "Gemini – Generate Twitter Content",
        "type": "@n8n/n8n-nodes-langchain.googleGemini",
        "typeVersion": 1,
        "position": [
          1408,
          -672
        ],
        "credentials": {
          "googlePalmApi": {
            "id": "4xnUJDzexy0KkJlD",
            "name": "FREE Google Gemini(PaLM) Api account "
          }
        }
      },
      {
        "parameters": {
          "modelId": {
            "__rl": true,
            "value": "models/gemini-flash-lite-latest",
            "mode": "list",
            "cachedResultName": "models/gemini-flash-lite-latest"
          },
          "messages": {
            "values": [
              {
                "content": "=You are Aman Suryavanshi’s LinkedIn strategist for premium business positioning and high-value opportunity generation. Create posts that establish him as a top-tier full-stack automation consultant while attracting quality clients and job offers.\n\nPROFESSIONAL POSITIONING:\n\nName: Aman Suryavanshi\n\nTitle: Full-Stack Automation Consultant & NextJS Specialist\n\nExpertise: High-performance NextJS sites + n8n Automations + API Integrations\n\nPortfolio: https://github.com/AmanSuryavanshi-1/Aviators_Training_Centre\n\nLocation: Delhi/NCR + Global remote\n\nServices: Website development, workflow automation, performance optimization, technical consulting\n\nTarget Market: Businesses needing measurable ROI from technical solutions\n\nREVENUE OBJECTIVES:\n\nAttract consulting clients for website + automation projects\n\nSecure job offers in AI PM / Technical Product roles\n\nExpand professional network for speaking/workshops\n\nCONTENT CONTEXT:\n\nSource: {{ $json.title }} ({{ $json.category }})\n\nDepth: {{ $json.contentAnalysis.wordCount }} words, {{ $json.contentAnalysis.sections }} sections\n\nVisual Assets: {{ $json.contentAnalysis.images }} images\n\nMARKET POSITIONING:\n\nB2B Hashtags: {{ $json.researchData.hashtagsAndTiming.trending_hashtags.linkedin.join(', ') }}\n\nEngagement Strategy: {{ $json.researchData.hashtagsAndTiming.engagement_strategies.linkedin }}\n\nProven Formats: {{ $json.researchData.competitorInsights.successful_formats.linkedin.join('; ') }}\n\nSOURCE CONTENT:\n{{ $json.sourceContent.fullText }}\n\nCLIENT ACQUISITION REQUIREMENTS:\n\n≤2800 characters per post\n\nLink every technical point to business impact (ROI, efficiency gains)\n\nShowcase measurable metrics (Lighthouse, cost savings)\n\nWrite as established consultant sharing insights\n\nInclude subtle CTA for business inquiries\n\nAppeal to CTOs, business owners, agency leads\n\nTRANSFORMATION APPROACH:\n\n“Strategic insights from optimizing 50+ sites to Lighthouse score 95+”\n\n“The automation framework that delivered 400% ROI for clients”\n\n“Case study: automated [process] saving $X and Y hours/week”\n\n“Why most companies miss this key automation opportunity”\n\nLINKEDIN AUTHORITY VOICE:\n“After delivering NextJS sites with 95+ Lighthouse scores for 20+ clients, I’ve identified key performance optimizations that directly impact revenue. Here’s what every business leader should know…”\n\nRETURN EXACTLY THIS JSON:\n{\n  \"linkedin_posts\": [\n    {\n      \"post_id\": 1,\n      \"priority\": \"delayed_60sec\",\n      \"theme\": \"client results and business impact focus\",\n      \"content\": \"Professional post showcasing technical expertise through client success stories, demonstrating clear business ROI, and positioning services while providing actionable insights to potential clients and employers\",\n      \"char_count\": 1850,\n      \"hashtags\": [\"#FullStackDevelopment\", \"#NextJSDeveloper\", \"#BusinessAutomation\", \"#WebsiteOptimization\", \"#TechnicalConsulting\", \"#DelhiTech\"],\n      \"has_image\": false\n    }\n  ]\n}\n"
              }
            ]
          },
          "options": {
            "temperature": 0.7
          }
        },
        "id": "08948b54-7f45-4987-a0ac-903a65815ede",
        "name": "Gemini – Generate LinkedIn Content",
        "type": "@n8n/n8n-nodes-langchain.googleGemini",
        "typeVersion": 1,
        "position": [
          1408,
          -480
        ],
        "credentials": {
          "googlePalmApi": {
            "id": "4xnUJDzexy0KkJlD",
            "name": "FREE Google Gemini(PaLM) Api account "
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// PROCESS TWITTER CONTENT & CREATE NOTION DRAFT\nconst strategyData = $('Code – Build Strategy & Context').first().json;\nconst geminiResponse = $('Gemini – Generate Twitter Content').first().json;\n\nconsole.log('🐦 Processing Twitter content for Notion draft...');\n\nlet twitterContent = null;\n\n// Parse Gemini Twitter response\ntry {\n  let rawText = '';\n  \n  // Handle different response formats\n  if (Array.isArray(geminiResponse) && geminiResponse[0]?.content?.parts?.[0]?.text) {\n    rawText = geminiResponse[0].content.parts[0].text;\n  } else if (geminiResponse.content?.parts?.[0]?.text) {\n    rawText = geminiResponse.content.parts[0].text;\n  } else if (geminiResponse.text) {\n    rawText = geminiResponse.text;\n  } else {\n    throw new Error('No text content found in Twitter response');\n  }\n  \n  // Extract JSON\n  const jsonMatch = rawText.match(/``````/i) || rawText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    const jsonString = jsonMatch[1] || jsonMatch[0];\n    twitterContent = JSON.parse(jsonString);\n    console.log('✅ Successfully parsed Twitter JSON');\n  } else {\n    throw new Error('No valid JSON found in Twitter response');\n  }\n  \n} catch (error) {\n  console.log('⚠️ Twitter parsing failed, creating fallback:', error.message);\n  \n  // High-quality fallback\n  const strategy = strategyData.contentStrategy.twitter;\n  const userProfile = strategyData.userProfile;\n  const title = strategyData.title;\n  const category = strategyData.category;\n  const hashtags = strategyData.researchData.hashtagsAndTiming.trending_hashtags.twitter;\n  \n  twitterContent = {\n    twitter_threads: strategy.threads.map((thread, index) => ({\n      thread_id: thread.id,\n      priority: thread.priority,\n      theme: thread.focus,\n      tweets: [\n        {\n          position: 1,\n          content: `🧵 ${index + 1}/${strategy.threads.length}: My journey with ${title}\\n\\n${category} has been eye-opening. Here's what I learned building this... 👇`,\n          char_count: 140,\n          has_image: false\n        },\n        {\n          position: 2,\n          content: `The challenge: Understanding ${category} concepts while building practical applications.\\n\\nThe solution: Hands-on experimentation + community learning.`,\n          char_count: 140,\n          has_image: false\n        },\n        {\n          position: 3,\n          content: `Key insight: Technical depth enhances PM credibility. This project strengthened my foundation for AI PM roles.\\n\\nWhat's your experience with ${category}? 👇`,\n          char_count: 150,\n          has_image: false\n        }\n      ].concat(index === strategy.threads.length - 1 ? [{\n        position: 4,\n        content: `This learning journey continues to shape my path toward AI PM roles.\\n\\n${hashtags.slice(0, 3).join(' ')}`,\n        char_count: 100,\n        has_image: false\n      }] : [])\n    }))\n  };\n}\n\n// Enforce character limits\nif (twitterContent?.twitter_threads) {\n  twitterContent.twitter_threads.forEach(thread => {\n    if (thread.tweets) {\n      thread.tweets.forEach(tweet => {\n        if (tweet.content && tweet.content.length > 275) {\n          tweet.content = tweet.content.substring(0, 270) + '...';\n          tweet.char_count = tweet.content.length;\n        }\n      });\n    }\n  });\n}\n\n// Create Notion-friendly JSON with toggles\nconst tweetDraftJson = {\n  generated_at: new Date().toISOString(),\n  total_threads: twitterContent?.twitter_threads?.length || 0,\n  threads: (twitterContent?.twitter_threads || []).map(thread => ({\n    thread_id: thread.thread_id,\n    priority: thread.priority,\n    theme: thread.theme,\n    total_tweets: thread.tweets?.length || 0,\n    tweets: (thread.tweets || []).map(tweet => ({\n      position: tweet.position,\n      content: tweet.content,\n      char_count: tweet.char_count,\n      has_image: tweet.has_image || false\n    }))\n  }))\n};\n\nconst processingResults = {\n  success: true,\n  total_threads: tweetDraftJson.total_threads,\n  total_tweets: tweetDraftJson.threads.reduce((sum, thread) => sum + thread.total_tweets, 0),\n  session_id: strategyData.sessionId,\n  original_id: strategyData.originalId\n};\n\nconsole.log(`✅ Twitter processing complete: ${processingResults.total_threads} threads, ${processingResults.total_tweets} tweets`);\n\nreturn [{\n  json: {\n    tweetDraftJson: JSON.stringify(tweetDraftJson, null, 2),\n    tweetGenerated: true,\n    processing_results: processingResults\n  }\n}];"
        },
        "id": "0aa11c6e-6b38-4c0c-bace-0087da5097af",
        "name": "Code – Process Twitter Content",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1760,
          -672
        ]
      },
      {
        "parameters": {
          "jsCode": "// PROCESS LINKEDIN CONTENT & CREATE NOTION DRAFT\nconst strategyData = $('Code – Build Strategy & Context').first().json;\nconst geminiResponse = $('Gemini – Generate LinkedIn Content').first().json;\n\nconsole.log('💼 Processing LinkedIn content for Notion draft...');\n\nlet linkedinContent = null;\n\n// Parse Gemini LinkedIn response\ntry {\n  let rawText = '';\n  \n  // Handle different response formats\n  if (Array.isArray(geminiResponse) && geminiResponse[0]?.content?.parts?.[0]?.text) {\n    rawText = geminiResponse[0].content.parts[0].text;\n  } else if (geminiResponse.content?.parts?.[0]?.text) {\n    rawText = geminiResponse.content.parts[0].text;\n  } else if (geminiResponse.text) {\n    rawText = geminiResponse.text;\n  } else {\n    throw new Error('No text content found in LinkedIn response');\n  }\n  \n  // Extract JSON\n  const jsonMatch = rawText.match(/``````/i) || rawText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    const jsonString = jsonMatch[1] || jsonMatch[0];\n    linkedinContent = JSON.parse(jsonString);\n    console.log('✅ Successfully parsed LinkedIn JSON');\n  } else {\n    throw new Error('No valid JSON found in LinkedIn response');\n  }\n  \n} catch (error) {\n  console.log('⚠️ LinkedIn parsing failed, creating fallback:', error.message);\n  \n  // High-quality fallback\n  const strategy = strategyData.contentStrategy.linkedin;\n  const userProfile = strategyData.userProfile;\n  const title = strategyData.title;\n  const category = strategyData.category;\n  const hashtags = strategyData.researchData.hashtagsAndTiming.trending_hashtags.linkedin;\n  \n  linkedinContent = {\n    linkedin_posts: strategy.posts.map((post, index) => ({\n      post_id: post.id,\n      priority: post.priority,\n      theme: post.focus,\n      content: `🚀 ${title} - Insights from My ${category} Learning Journey\\n\\n${userProfile.role} sharing real learnings from hands-on exploration.\\n\\n💡 THE CHALLENGE:\\nNavigating ${category} complexity while building practical applications that solve real problems.\\n\\n🔧 THE APPROACH:\\nHands-on experimentation combined with systematic learning and community engagement.\\n\\n📊 THE RESULTS:\\nDeeper understanding of how ${category} concepts apply to product management and technical leadership.\\n\\n🎯 KEY TAKEAWAYS:\\n• Theory without practice is incomplete\\n• Community feedback accelerates learning\\n• Technical depth enhances PM credibility\\n\\nThis exploration strengthened my technical foundation for AI PM roles while contributing valuable insights to the developer community.\\n\\nWhat's your experience with ${category}? I'd love to hear your perspectives and challenges! 👇\\n\\n${hashtags.slice(0, 4).join(' ')}`,\n      char_count: 1200,\n      hashtags: hashtags.slice(0, 4),\n      has_image: false\n    }))\n  };\n}\n\n// Enforce character limits\nif (linkedinContent?.linkedin_posts) {\n  linkedinContent.linkedin_posts.forEach(post => {\n    if (post.content && post.content.length > 2800) {\n      post.content = post.content.substring(0, 2750) + '...\\n\\n[Continued in comments]';\n      post.char_count = post.content.length;\n    }\n  });\n}\n\n// Create Notion-friendly JSON\nconst linkedinDraftJson = {\n  generated_at: new Date().toISOString(),\n  total_posts: linkedinContent?.linkedin_posts?.length || 0,\n  posts: (linkedinContent?.linkedin_posts || []).map(post => ({\n    post_id: post.post_id,\n    priority: post.priority,\n    theme: post.theme,\n    content: post.content,\n    char_count: post.char_count,\n    hashtags: post.hashtags || [],\n    has_image: post.has_image || false\n  }))\n};\n\nconst processingResults = {\n  success: true,\n  total_posts: linkedinDraftJson.total_posts,\n  session_id: strategyData.sessionId,\n  original_id: strategyData.originalId\n};\n\nconsole.log(`✅ LinkedIn processing complete: ${processingResults.total_posts} posts`);\n\nreturn [{\n  json: {\n    linkedinDraftJson: JSON.stringify(linkedinDraftJson, null, 2),\n    linkedinPostGenerated: true,\n    processing_results: processingResults\n  }\n}];"
        },
        "id": "8807755a-f8af-4159-b260-e144ef0883fe",
        "name": "Code – Process LinkedIn Content",
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1760,
          -480
        ]
      },
      {
        "parameters": {
          "resource": "databasePage",
          "operation": "update",
          "pageId": {
            "__rl": true,
            "value": "={{ $('Code – Process Twitter Content').first().json.processing_results.original_id }}",
            "mode": "id",
            "__regex": "^([0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12})"
          },
          "propertiesUi": {
            "propertyValues": [
              {
                "key": "Status|select",
                "type": "select",
                "selectValue": "Pending Approval"
              },
              {
                "key": "TweetGenerated|checkbox",
                "type": "checkbox",
                "checkboxValue": true
              },
              {
                "key": "TweetDraft|rich_text",
                "textContent": "=={{ ($('Code – Process Twitter Content').first().json.tweetDraftJson).substring(0, 1950) + '...' }}"
              },
              {
                "key": "LinkedInPostGenerated|checkbox",
                "type": "checkbox",
                "checkboxValue": true
              },
              {
                "key": "Twitter DraftURL|rich_text",
                "textContent": "=={{ ($('Code – Process LinkedIn Content').first().json.linkedinDraftJson).substring(0, 1950) + '...' }}"
              },
              {
                "key": "Notes|rich_text",
                "richText": true,
                "text": {
                  "text": [
                    {
                      "text": "=📝 CONTENT GENERATED\n\n🐦 TWITTER:\nThreads: {{ $('Code – Process Twitter Content').first().json.processing_results.total_threads }}\nTweets: {{ $('Code – Process Twitter Content').first().json.processing_results.total_tweets }}\n\n💼 LINKEDIN:\nPosts: {{ $('Code – Process LinkedIn Content').first().json.processing_results.total_posts }}\n\n⏳ STATUS: Pending Approval\n\nPlease review drafts and set Status to 'Approved' to begin posting.\n\n📄 Here is your file: [Drive Output](https://drive.google.com/file/d/1saWqLI_VKrWdeil1_ya0aBacR6_xgZow/view?usp=drive_link)\n\nGenerated: {{ new Date().toLocaleString('en-IN', {timeZone: 'Asia/Kolkata'}) }} IST",
                      "annotationUi": {}
                    }
                  ]
                }
              },
              {
                "key": "LinkedIn DraftURL|rich_text",
                "richText": true,
                "text": {
                  "text": [
                    {
                      "text": "=https://drive.google.com/file/d/{{ $json.LinkedIn_id }}/view?usp=drive_link",
                      "isLink": true,
                      "textLink": "=https://drive.google.com/file/d/{{ $json.LinkedIn_id }}/view?usp=drive_link",
                      "annotationUi": {}
                    }
                  ]
                }
              },
              {
                "key": "Twitter DraftURL|rich_text",
                "richText": true,
                "text": {
                  "text": [
                    {
                      "text": "=https://drive.google.com/file/d/{{ $json.Twitter_id }}/view?usp=drive_link",
                      "isLink": true,
                      "textLink": "=https://drive.google.com/file/d/{{ $json.Twitter_id }}/view?usp=drive_link",
                      "annotationUi": {}
                    }
                  ]
                }
              }
            ]
          },
          "options": {}
        },
        "id": "a48467cf-3eeb-48cc-b26d-cc72d124ced3",
        "name": "Notion – Create Drafts & Request Approval",
        "type": "n8n-nodes-base.notion",
        "typeVersion": 2,
        "position": [
          2880,
          -576
        ],
        "credentials": {
          "notionApi": {
            "id": "je8hKPK6RzYSk4JA",
            "name": "Notion account 2"
          }
        }
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          960,
          -576
        ],
        "id": "b85702a3-418c-4f3f-b219-813bab854581",
        "name": "Merge"
      },
      {
        "parameters": {},
        "type": "n8n-nodes-base.merge",
        "typeVersion": 3.2,
        "position": [
          2432,
          -576
        ],
        "id": "552ef086-ad15-452b-b065-d9ca8611dbb7",
        "name": "Merge2"
      },
      {
        "parameters": {
          "operation": "createFromText",
          "content": "={{ $json.markdownContent }}",
          "name": "=Twitterdraft-{{ $('Code – Build Strategy & Context').item.json.title }}-{{ $json.processing_results.session_id }}.md",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1F25H1IcOyYzJa41LwbD-r31_Ogs6ASZd",
            "mode": "list",
            "cachedResultName": "N8N Build in public Drafts - LinkedIn & X",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1F25H1IcOyYzJa41LwbD-r31_Ogs6ASZd"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          2208,
          -672
        ],
        "id": "5991243f-3c34-41ad-9aa5-628646b4af3f",
        "name": "Create Twitter Draft",
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "1hcyFpBqSOMDRDna",
            "name": "Google Drive Adude"
          }
        }
      },
      {
        "parameters": {
          "operation": "createFromText",
          "content": "={{ $json.markdownContent }}",
          "name": "=LinkedIndraft-{{ $('Code – Build Strategy & Context').item.json.title }}-{{ $json.processing_results.session_id }}.md",
          "driveId": {
            "__rl": true,
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1F25H1IcOyYzJa41LwbD-r31_Ogs6ASZd",
            "mode": "list",
            "cachedResultName": "N8N Build in public Drafts - LinkedIn & X",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1F25H1IcOyYzJa41LwbD-r31_Ogs6ASZd"
          },
          "options": {}
        },
        "type": "n8n-nodes-base.googleDrive",
        "typeVersion": 3,
        "position": [
          2208,
          -480
        ],
        "id": "223267cf-bbff-4cb9-9cb9-5a76d2a9f1b0",
        "name": "Create LinkedIn Draft",
        "credentials": {
          "googleDriveOAuth2Api": {
            "id": "1hcyFpBqSOMDRDna",
            "name": "Google Drive Adude"
          }
        }
      },
      {
        "parameters": {
          "jsCode": "// Format Twitter JSON into Markdown\nconst data = typeof $json.tweetDraftJson === 'string'\n  ? JSON.parse($json.tweetDraftJson)\n  : $json.tweetDraftJson;\n\nconst sessionId = $json.processing_results.session_id || Date.now();\nlet md = `# Twitter Draft – Session ${sessionId}\\n\\n`;\n\nmd += `## 🐦 Threads (Total: ${data.total_threads})\\n\\n`;\ndata.threads.forEach(thread => {\n  md += `### Thread ${thread.thread_id}: ${thread.theme}\\n\\n`;\n  thread.tweets.forEach(tweet => {\n    md += `- **${tweet.position}/${thread.total_tweets}:** ${tweet.content}\\n`;\n  });\n  md += `\\n---\\n\\n`;\n});\n\nreturn [{\n  json: {\n    markdownContent: md,\n    fileName: `twitter-draft-${sessionId}.md`,\n    processing_results: $json.processing_results\n  }\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1984,
          -672
        ],
        "id": "74d8c436-ff9e-4c64-9427-c739601b8241",
        "name": "Twitter - Format as Markdown"
      },
      {
        "parameters": {
          "jsCode": "// Format LinkedIn JSON into Markdown\nconst data = typeof $json.linkedinDraftJson === 'string'\n  ? JSON.parse($json.linkedinDraftJson)\n  : $json.linkedinDraftJson;\n\nconst sessionId = $json.processing_results.session_id || Date.now();\nlet md = `# LinkedIn Draft – Session ${sessionId}\\n\\n`;\n\nmd += `## 💼 Posts (Total: ${data.total_posts})\\n\\n`;\ndata.posts.forEach(post => {\n  md += `### Post ${post.post_id}: ${post.theme}\\n\\n`;\n  md += `${post.content}\\n\\n`;\n  if (Array.isArray(post.hashtags)) {\n    md += `*Hashtags:* ${post.hashtags.join(' ')}\\n\\n`;\n  }\n  md += `---\\n\\n`;\n});\n\nreturn [{\n  json: {\n    markdownContent: md,\n    fileName: `linkedin-draft-${sessionId}.md`,\n    processing_results: $json.processing_results\n  }\n}];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          1984,
          -480
        ],
        "id": "b55585a6-a9fe-4cf0-a269-1ef87346619f",
        "name": "LinkedIn Format as Markdown"
      },
      {
        "parameters": {
          "jsCode": "// Suppose 'items' contains your array: [{json:{id:...}}, ...]\nreturn [\n  { json: { Twitter_id: items[0]?.json.id, LinkedIn_id: items[1]?.json.id } }\n];\n"
        },
        "type": "n8n-nodes-base.code",
        "typeVersion": 2,
        "position": [
          2656,
          -576
        ],
        "id": "78c635e7-4615-4114-8ae4-c307b8984f20",
        "name": "ID Structuring"
      }
    ],
    "connections": {
      "When clicking 'Execute workflow'": {
        "main": [
          [
            {
              "node": "Notion – Get Ready Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Notion – Get Ready Content": {
        "main": [
          [
            {
              "node": "Filter – Has Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Filter – Has Content": {
        "main": [
          [
            {
              "node": "Code – Select Content & Profile",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code – Select Content & Profile": {
        "main": [
          [
            {
              "node": "Notion – Update to Processing",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Notion – Update to Processing": {
        "main": [
          [
            {
              "node": "Notion – Extract All Blocks",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Notion – Extract All Blocks": {
        "main": [
          [
            {
              "node": "Code – Extract & Process Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code – Extract & Process Content": {
        "main": [
          [
            {
              "node": "Perplexity – Research Hashtags & Timing",
              "type": "main",
              "index": 0
            },
            {
              "node": "Perplexity – Research Competitors & Themes",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Perplexity – Research Hashtags & Timing": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Perplexity – Research Competitors & Themes": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Code – Build Strategy & Context": {
        "main": [
          [
            {
              "node": "Gemini – Generate Twitter Content",
              "type": "main",
              "index": 0
            },
            {
              "node": "Gemini – Generate LinkedIn Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Gemini – Generate Twitter Content": {
        "main": [
          [
            {
              "node": "Code – Process Twitter Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Gemini – Generate LinkedIn Content": {
        "main": [
          [
            {
              "node": "Code – Process LinkedIn Content",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code – Process Twitter Content": {
        "main": [
          [
            {
              "node": "Twitter - Format as Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Code – Process LinkedIn Content": {
        "main": [
          [
            {
              "node": "LinkedIn Format as Markdown",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Notion – Create Drafts & Request Approval": {
        "main": [
          []
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "Code – Build Strategy & Context",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge2": {
        "main": [
          [
            {
              "node": "ID Structuring",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create Twitter Draft": {
        "main": [
          [
            {
              "node": "Merge2",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Create LinkedIn Draft": {
        "main": [
          [
            {
              "node": "Merge2",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "Twitter - Format as Markdown": {
        "main": [
          [
            {
              "node": "Create Twitter Draft",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "LinkedIn Format as Markdown": {
        "main": [
          [
            {
              "node": "Create LinkedIn Draft",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "ID Structuring": {
        "main": [
          [
            {
              "node": "Notion – Create Drafts & Request Approval",
              "type": "main",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "2aff0c99a9b9ea9c976d68c5887d32445a6bdc6f59f99592eb5b4c4dbaf3d92e"
    }
  }