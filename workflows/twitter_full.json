{
  "name": "Production-Ready: Content Ingestion to Airtable to Social Media",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "content-webhook-prod",
        "authentication": "headerAuth",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-start",
      "name": "1. Secure Content Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1500,
        200
      ],
      "webhookId": "prod-webhook-id",
      "credentials": {
        "httpHeaderAuth": {
          "id": "X-Secret-Token",
          "name": "Webhook Secret Token"
        }
      },
      "notes": "ðŸŸ¢ START: Receives a raw text or markdown blob. Secure this endpoint by setting a secret token in the 'X-Secret-Token' header."
    },
    {
      "parameters": {
        "jsCode": "const rawContent = $input.first().json.body || ($input.first().binary ? $input.first().binary.data.toString() : null);\n\nif (!rawContent || rawContent.trim() === '') {\n  throw new Error('No content received in webhook body.');\n}\n\nconst lines = rawContent.split('\n').map(line => line.trim()).filter(line => line);\n\nif (lines.length === 0) {\n  throw new Error('Content is empty or contains only whitespace.');\n}\n\nlet mainHeading = lines[0].replace(/^#\s+/, '').trim();\nconst subheadings = [];\nconst bodyLines = [];\nconst mediaUrls = [];\n\nfor (let i = 1; i < lines.length; i++) {\n  const line = lines[i];\n  if (line.startsWith('## ')) {\n    subheadings.push(line.substring(3));\n  } else if (line.match(/^https?:\/\/.+\.(jpg|jpeg|png|gif|mp4|mov|webm)$/i)) {\n    mediaUrls.push(line);\n  } else {\n    bodyLines.push(line);\n  }\n}\n\nconst pageName = mainHeading.toLowerCase().replace(/[^a-z0-9\s]/g, '').replace(/\s+/g, '-').substring(0, 50) || `content-${Date.now()}`;\nconst body = bodyLines.join('\n');\n\nif (!mainHeading && !body) {\n  throw new Error('No meaningful content found. Ensure there is at least a heading or body text.');\n}\n\nreturn {\n  pageName,\n  mainHeading: mainHeading || 'Untitled Page',\n  subheadings,\n  body,\n  mediaUrls\n};"
      },
      "id": "parse-content",
      "name": "2. Parse Content Blob",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        200
      ],
      "notes": "Takes the raw blob and structures it into a clean JSON object: {pageName, mainHeading, subheadings, body, mediaUrls}."
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "appYOUR_BASE_ID"
        },
        "table": "Pages",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Heading": "={{ $json.mainHeading }}",
            "Subheadings": "={{ $json.subheadings.join('\n') }}",
            "Content": "={{ $json.body }}",
            "Media": "={{ $json.mediaUrls.map(url => ({ url })) }}",
            "Status": "Processing"
          }
        },
        "options": {}
      },
      "id": "create-airtable-record",
      "name": "3. Create Airtable Record",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [
        -1060,
        200
      ],
      "credentials": {
        "airtableTokenApi": "airtable_credentials"
      },
      "notes": "Creates a new record in the Airtable 'Pages' table with the parsed content and sets status to 'Processing'. **ACTION REQUIRED: Replace 'appYOUR_BASE_ID' with your actual Airtable Base ID.**"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a content optimization expert. Refine the provided content to be more engaging and shareable for social media. Return a JSON object with: {\"refinedContent\": \"string\", \"summary\": \"string\", \"hashtags\": \"string\"}"
            },
            {
              "role": "user",
              "content": "Refine this content:\n\nHeading: {{ $('create-airtable-record').item.json.fields.Heading }}\nSubheadings: {{ $('create-airtable-record').item.json.fields.Subheadings }}\nContent: {{ $('create-airtable-record').item.json.fields.Content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ai-content-refiner",
      "name": "4. AI Content Refiner",
      "type": "n8n-nodes-base.openRouter",
      "typeVersion": 1,
      "position": [
        -840,
        200
      ],
      "credentials": {
        "openRouterApi": "openrouter_credentials"
      },
      "notes": "Uses AI to refine the raw content, generate a summary, and suggest relevant hashtags."
    },
    {
      "parameters": {
        "jsCode": "const response = JSON.parse($input.first().json.response);\nreturn {\n  recordId: $('create-airtable-record').item.json.id,\n  ...response\n};"
      },
      "id": "process-ai-response",
      "name": "5. Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -620,
        200
      ],
      "notes": "Parses the JSON response from the AI model and combines it with the Airtable record ID for the next step."
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "appYOUR_BASE_ID"
        },
        "table": "Pages",
        "id": "={{ $json.recordId }}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Refined Content": "={{ $json.refinedContent }}",
            "Summary": "={{ $json.summary }}",
            "Hashtags": "={{ $json.hashtags }}",
            "Status": "Ready to Post"
          }
        },
        "options": {}
      },
      "id": "update-record-ai",
      "name": "6. Update Record with AI Output",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [
        -400,
        200
      ],
      "credentials": {
        "airtableTokenApi": "airtable_credentials"
      },
      "notes": "Updates the Airtable record with the AI-refined content and sets the status to 'Ready to Post'. **ACTION REQUIRED: Replace 'appYOUR_BASE_ID' with your actual Airtable Base ID.**"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "value": 15
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "7. Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -180,
        400
      ],
      "notes": "Checks every 15 minutes for new content that is ready to be posted to social media."
    },
    {
      "parameters": {
        "operation": "list",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "appYOUR_BASE_ID"
        },
        "table": "Pages",
        "options": {
          "filterByFormula": "AND({Status} = 'Ready to Post')",
          "maxRecords": 1,
          "sorts": [
            {
              "field": "Created",
              "direction": "asc"
            }
          ]
        }
      },
      "id": "check-ready-to-post",
      "name": "8. Check for Ready Content",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [
        0,
        400
      ],
      "credentials": {
        "airtableTokenApi": "airtable_credentials"
      },
      "notes": "Fetches the oldest record from Airtable that has the 'Ready to Post' status. **ACTION REQUIRED: Replace 'appYOUR_BASE_ID' with your actual Airtable Base ID.**"
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "id": "has-records",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "larger"
              }
            }
          ]
        }
      },
      "id": "has-records-if",
      "name": "9. Has Records?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        220,
        400
      ],
      "notes": "Checks if any records were returned from Airtable. If not, the workflow stops here."
    },
    {
      "parameters": {
        "jsCode": "const record = $input.first().json;\nconst fields = record.fields;\nconst fullContent = fields['Refined Content'] || fields['Content'] || '';\nconst shouldThread = fullContent.length > 270;\n\nreturn {\n  recordId: record.id,\n  ...fields,\n  fullContent,\n  shouldThread\n};"
      },
      "id": "prepare-tweet-content",
      "name": "10. Prepare Tweet Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        400
      ],
      "notes": "Prepares the content for tweeting, determines if it needs to be a thread, and structures the data."
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-r1",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a Twitter content expert. Create engaging tweets. If content is short, create ONE tweet (<=280 chars). If longer, create a THREAD of 2-8 tweets. For threads, return a JSON array of objects: [{\"text\": \"Tweet 1...\"}, {\"text\": \"Tweet 2...\"}]. For single tweets, return just the tweet text."
            },
            {
              "role": "user",
              "content": "Content: {{ $('prepare-tweet-content').item.json.fullContent }}\nHashtags: {{ $('prepare-tweet-content').item.json.Hashtags }}\n\nCreate {{ $('prepare-tweet-content').item.json.shouldThread ? 'a thread' : 'a single tweet' }}."
            }
          ]
        },
        "options": {}
      },
      "id": "ai-tweet-generator",
      "name": "11. AI Tweet Generator",
      "type": "n8n-nodes-base.openRouter",
      "typeVersion": 1,
      "position": [
        660,
        400
      ],
      "credentials": {
        "openRouterApi": "openrouter_credentials"
      },
      "notes": "Uses AI to generate the final tweet(s), either as a single post or a structured thread."
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "id": "is-thread",
              "leftValue": "={{ $('prepare-tweet-content').item.json.shouldThread }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "thread-or-single-if",
      "name": "12. Thread or Single?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        880,
        400
      ],
      "notes": "Routes the workflow based on whether the content should be a single tweet or a thread. Top output = Thread (true), Bottom output = Single Tweet (false)."
    },
    {
      "parameters": {
        "text": "={{ $('ai-tweet-generator').item.json.response }}",
        "additionalFields": {}
      },
      "id": "post-single-tweet",
      "name": "13b. Post Single Tweet",
      "type": "n8n-nodes-base.twitter",
      "typeVersion": 2,
      "position": [
        1100,
        600
      ],
      "credentials": {
        "twitterOAuth2Api": "twitter_credentials"
      },
      "notes": "Posts the generated content as a single tweet."
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $('ai-tweet-generator').item.json.response;\nlet tweets;\ntry {\n  tweets = JSON.parse(aiResponse);\n} catch (e) {\n  // Fallback for non-JSON response\n  tweets = [{ text: aiResponse }];\n}\nreturn tweets.map(tweet => ({ json: tweet }));"
      },
      "id": "parse-thread-tweets",
      "name": "13a. Parse Thread Tweets",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        300
      ],
      "notes": "Parses the JSON array of tweets from the AI response to prepare for looping."
    },
    {
      "parameters": {
        "text": "={{ $json.text }}",
        "additionalFields": {
          "inReplyToStatusId": "={{ $runIndex > 0 ? $('post-thread-tweet').last().json.data.id : undefined }}"
        }
      },
      "id": "post-thread-tweet",
      "name": "14. Post Thread Tweet",
      "type": "n8n-nodes-base.twitter",
      "typeVersion": 2,
      "position": [
        1320,
        300
      ],
      "credentials": {
        "twitterOAuth2Api": "twitter_credentials"
      },
      "notes": "Posts tweets in a loop, replying to the previous tweet in the sequence to create a thread."
    },
    {
      "parameters": {
        "mode": "merge"
      },
      "id": "merge-results",
      "name": "15. Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        1540,
        400
      ],
      "notes": "Merges the execution paths from the single tweet and thread branches to proceed with the final update."
    },
    {
      "parameters": {
        "jsCode": "const singleTweet = $('post-single-tweet').first()?.json;\nconst threadTweets = $('post-thread-tweet').all();\n\nlet tweetUrl;\nif (singleTweet) {\n  tweetUrl = `https://twitter.com/i/web/status/${singleTweet.data.id}`;\n} else if (threadTweets.length > 0) {\n  tweetUrl = `https://twitter.com/i/web/status/${threadTweets[0].json.data.id}`;\n}\n\nreturn {\n  recordId: $('prepare-tweet-content').item.json.recordId,\n  tweetUrl\n};"
      },
      "id": "collect-tweet-results",
      "name": "16. Collect Tweet URL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        400
      ],
      "notes": "Collects the URL of the main tweet (either the single tweet or the first tweet of the thread)."
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "appYOUR_BASE_ID"
        },
        "table": "Pages",
        "id": "={{ $json.recordId }}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "Posted",
            "Tweet URL": "={{ $json.tweetUrl }}",
            "Posted At": "={{ new Date().toISOString() }}"
          }
        },
        "options": {}
      },
      "id": "update-posted-status",
      "name": "17. Update Posted Status",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [
        1980,
        400
      ],
      "credentials": {
        "airtableTokenApi": "airtable_credentials"
      },
      "notes": "âœ… DONE: Updates the Airtable record with the final tweet URL and sets the status to 'Posted'. **ACTION REQUIRED: Replace 'appYOUR_BASE_ID' with your actual Airtable Base ID.**"
    },
    {
      "parameters": {},
      "id": "no-op-end",
      "name": "End",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        440,
        600
      ],
      "notes": "Stops the workflow if no records are found."
    },
    {
      "parameters": {
        "jsCode": "const error = $input.first().json;\nconst recordIdNode = $nodes['create-airtable-record'] || $nodes['prepare-tweet-content'];\nconst recordId = recordIdNode?.first()?.json?.id || recordIdNode?.first()?.json?.recordId;\n\nreturn {\n  error: JSON.stringify(error, null, 2),\n  recordId: recordId,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "error-handler-code",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1060,
        800
      ],
      "notes": "Catches any errors in the workflow, extracts the error message and relevant record ID."
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "id": "has-record-id",
              "leftValue": "={{ $json.recordId }}",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ]
        }
      },
      "id": "has-record-id-if",
      "name": "Has Record ID?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -840,
        800
      ],
      "notes": "Checks if a record ID was found to update its status to 'Error'."
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "mode": "list",
          "value": "appYOUR_BASE_ID"
        },
        "table": "Pages",
        "id": "={{ $('error-handler-code').item.json.recordId }}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "Error",
            "Error": "={{ $('error-handler-code').item.json.error }}"
          }
        },
        "options": {
          "continueOnFail": true
        }
      },
      "id": "update-error-status",
      "name": "Update Error Status",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2,
      "position": [
        -620,
        800
      ],
      "credentials": {
        "airtableTokenApi": "airtable_credentials"
      },
      "notes": "Updates the Airtable record's status to 'Error' and logs the error message. **ACTION REQUIRED: Replace 'appYOUR_BASE_ID' with your actual Airtable Base ID.**"
    }
  ],
  "connections": {
    "webhook-start": { "main": [[{ "node": "parse-content", "type": "main", "index": 0 }]] },
    "parse-content": { "main": [[{ "node": "create-airtable-record", "type": "main", "index": 0 }]] },
    "create-airtable-record": { "main": [[{ "node": "ai-content-refiner", "type": "main", "index": 0 }]] },
    "ai-content-refiner": { "main": [[{ "node": "process-ai-response", "type": "main", "index": 0 }]] },
    "process-ai-response": { "main": [[{ "node": "update-record-ai", "type": "main", "index": 0 }]] },
    "schedule-trigger": { "main": [[{ "node": "check-ready-to-post", "type": "main", "index": 0 }]] },
    "check-ready-to-post": { "main": [[{ "node": "has-records-if", "type": "main", "index": 0 }]] },
    "has-records-if": {
      "main": [
        [{ "node": "prepare-tweet-content", "type": "main", "index": 0 }],
        [{ "node": "no-op-end", "type": "main", "index": 1 }]
      ]
    },
    "prepare-tweet-content": { "main": [[{ "node": "ai-tweet-generator", "type": "main", "index": 0 }]] },
    "ai-tweet-generator": { "main": [[{ "node": "thread-or-single-if", "type": "main", "index": 0 }]] },
    "thread-or-single-if": {
      "main": [
        [{ "node": "parse-thread-tweets", "type": "main", "index": 0 }],
        [{ "node": "post-single-tweet", "type": "main", "index": 1 }]
      ]
    },
    "post-single-tweet": { "main": [[{ "node": "merge-results", "type": "main", "index": 1 }]] },
    "parse-thread-tweets": { "main": [[{ "node": "post-thread-tweet", "type": "main", "index": 0 }]] },
    "post-thread-tweet": { "main": [[{ "node": "merge-results", "type": "main", "index": 0 }]] },
    "merge-results": { "main": [[{ "node": "collect-tweet-results", "type": "main", "index": 0 }]] },
    "collect-tweet-results": { "main": [[{ "node": "update-posted-status", "type": "main", "index": 0 }]] },
    "error-handler-code": { "main": [[{ "node": "has-record-id-if", "type": "main", "index": 0 }]] },
    "has-record-id-if": {
      "main": [
        [{ "node": "update-error-status", "type": "main", "index": 0 }]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "errorWorkflow": "error-handler-code",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {},
  "tags": [
    { "name": "Production" },
    { "name": "Airtable" },
    { "name": "Twitter" },
    { "name": "AI" }
  ],
  "triggerCount": 2,
  "versionId": "4.0"
}